(author: Chris P | Updated: AI Assistant)
(version: 0.4)
(date: 04/11/25)

o<toolchange> sub

; Parameter #3989 is used to track if the carousel is homed (M13) (volatile)
; Parameter #3990 is used to track the current tool pocket (persistently)
; Parameter #3991 is used to track the current tool loaded it in the spindle (persistently)
; Parameters #4001 to #4024 are used to track which tool is in which pocket (persistently)
; Parameter #4000 is not populated just used in the maths to calculate the above numbers
; #<number_of_pockets>: The number of pockets the ATC platter has, This is user set in the INI file via #<_ini[atc]pockets>
; #<atc_z_tool_change_height> The Z height your spindle needs to be at to clamp/unclamp a tool from the ATC platter
; #<atc_z_tool_clearance_height> The Z clearance height in machine coordinates that your spindle needs to be at to clear the tools during carousel rotation
; #<atc_x_tool_change_pos> The X position in machine coordinates for tool change
; #<atc_y_tool_change_pos> The Y position in machine coordinates for tool change
; #<atc_x_tool_clearance_pos> The X position in machine coordinates for safe carousel rotation
; #<atc_y_tool_clearance_pos> The Y position in machine coordinates for safe carousel rotation

(PRINT, o<toolchange> selected_tool: #<selected_tool>, tool_in_spindle: #<tool_in_spindle>, selected_pocket: #<selected_pocket>, current_pocket: #<current_pocket>, task: #<_task>)

o100 if [#<_task> EQ 0]
    (DEBUG, Task is null)
    o<toolchange> return [999]
o100 endif (this code eliminates tool missing error on load for multiple use tools)

; default to a 24 pocket ATC (matching DynATC Widget behaviour), then update based on INI settings
#<number_of_pockets> = 24
o110 if [EXISTS[#<_ini[atc]pockets>]]
    #<number_of_pockets> = #<_ini[atc]pockets>
o110 endif

; Load Z parameters from INI
#<atc_z_tool_change_height> = -3.9000
o120 if [EXISTS[#<_ini[atc]z_tool_change_height>]]
    #<atc_z_tool_change_height> = #<_ini[atc]z_tool_change_height>
o120 endif
#<atc_z_tool_clearance_height> = [#<_ini[AXIS_Z]MAX_LIMIT>-0.01]
o130 if [EXISTS[#<_ini[atc]z_tool_clearance_height>]]
    #<atc_z_tool_clearance_height> = #<_ini[atc]z_tool_clearance_height>
o130 endif

; Load X parameters from INI
#<atc_x_tool_change_pos> = -20.0000
o140 if [EXISTS[#<_ini[atc]x_tool_change_pos>]]
    #<atc_x_tool_change_pos> = #<_ini[atc]x_tool_change_pos>
o140 endif
#<atc_x_tool_clearance_pos> = -20.0000
o150 if [EXISTS[#<_ini[atc]x_tool_clearance_pos>]]
    #<atc_x_tool_clearance_pos> = #<_ini[atc]x_tool_clearance_pos>
o150 endif

; Load Y parameters from INI
#<atc_y_tool_change_pos> = -10.0000
o160 if [EXISTS[#<_ini[atc]y_tool_change_pos>]]
    #<atc_y_tool_change_pos> = #<_ini[atc]y_tool_change_pos>
o160 endif
#<atc_y_tool_clearance_pos> = -10.0000
o170 if [EXISTS[#<_ini[atc]y_tool_clearance_pos>]]
    #<atc_y_tool_clearance_pos> = #<_ini[atc]y_tool_clearance_pos>
o170 endif

; assign the variables passed by M6 change_prolog to some parameters
#100 = #<selected_tool>
#110 = #<tool_in_spindle>
#120 = #<selected_pocket>
#121 = #<current_pocket>

o180 if [#<selected_tool> EQ #<tool_in_spindle>] ; checks if tool in the spindle is same as requested
    (PRINT, Requested tool already in spindle)
    (PRINT, o<toolchange> endsub)
    o<toolchange> endsub [1]
    M2
o180 endif

o190 if [#3991 NE #<tool_in_spindle>]
    (PRINT, o<toolchange> tool_in_spindle does not match 3991)
o190 endif

#<next_pocket> = 0 ; assigns 0 to the next pocket for a later check if the tool is found in the carousel
#<open_pocket> = 0
#130 = #<number_of_pockets> ; assign test parameter the number of pockets in the carousel

o200 do
    o201 if [#[4000 + #130] EQ #<selected_tool>] ; checks all pockets to see if it contains tool number requested as the new tool
        #<next_pocket> = #130 ; if tool is found in pocket, assigns the next pocket
    o201 endif
    o202 if [#[4000 + #130] EQ 0] ; checks if the pocket is empty, last pocket checked will be the lowest empty pocket number, for putting tool in spindle away.
        #<open_pocket> = #130
    o202 endif
    #130 = [#130 - 1]
o200 while [#130 GT 0]
o210 if [#<next_pocket> EQ 0] ; if tool is not found, aborts and sends a message
    (abort, Tool T%d#<selected_tool> not found in carousel)
o210 endif

; First move Z to clearance height for safe movement
G90
G0 G53 Z#<atc_z_tool_clearance_height>
; Then move to X,Y clearance position
G0 G53 X#<atc_x_tool_clearance_pos> Y#<atc_y_tool_clearance_pos>

; now we know which pocket the next tool is sitting in
; we need to know if we need to put a tool away
; or if there is not tool in the spindle
o220 if [#<tool_in_spindle> GT 0] ; checks if there is a valid tool in the spindle
    o221 if [#<open_pocket> EQ 0] ; If there is a tool in the spindle, checks if there is an open pocket
        (abort, Carousel is full, cant put away tool T#<tool_in_spindle> in into carousel)
    o221 endif
    
    ; Move to tool change position
    G0 G53 X#<atc_x_tool_change_pos> Y#<atc_y_tool_change_pos>
    G0 G53 Z#<atc_z_tool_change_height>
    
    M10 P[#<open_pocket>] ; move carousel to an open pocket
    
    ; Store tool with proper orientation
    (debug, Storing tool T#<tool_in_spindle> in pocket #<open_pocket>)
    M21 ; store tool
    
    (DEBUG, EVAL[vcp.getWidget{"dynatc"}.store_tool{#<open_pocket>, #<tool_in_spindle>}])
    #140 = #<open_pocket>
    #[4000 + #140] = #<tool_in_spindle> ; save tool number in pocket
    #3991 = 0 ; empty tool in the spindle
    M61 Q0
    G49
    
    ; Move back to clearance height after tool put away
    G0 G53 Z#<atc_z_tool_clearance_height>
o220 endif

o230 if [#<selected_tool> GT 0] ; selected tool is not tool0
    ; Move to clearance position before carousel movement
    G0 G53 X#<atc_x_tool_clearance_pos> Y#<atc_y_tool_clearance_pos>
    
    ; Position carousel and extend
    (debug, Moving carousel to pocket #<next_pocket> for tool T#<selected_tool>)
    M10 P#<next_pocket> ; set the carousel to move to the right pocket for the selected tool
    M65 P1 ; Turn off carousel retract solenoid
    M64 P0 ; Turn on carousel extend solenoid
    M66 P1 L3 Q5 ; check carousel extended position sensor
    o231 if [#5399 LT 0]
        M65 P0 ; turn off the carousel extend
        (abort, Failed to extend carousel) ; abort if the sensor does not activate in 5 seconds
    o231 endif
    M65 P0
    
    ; Move to tool change position for pickup
    G0 G53 X#<atc_x_tool_change_pos> Y#<atc_y_tool_change_pos>
    G0 G53 Z#<atc_z_tool_change_height>

    ; Orient spindle before tool loading (ALWAYS required)
    (debug, Orienting spindle before tool load)
    M5 ; Ensure spindle is stopped
    G4 P1.0 ; Dwell for spindle to stop completely
    o<orientspindle> call
    o235 if [#5399 EQ 0]
        (msg, Spindle orientation failed, aborting tool load)
        o<toolchange> return [0]
    o235 endif
    
    ; Explicitly unclamp the drawbar (ALWAYS required before loading)
    (debug, Unclamping drawbar before tool load)
    M65 P2 ; turn off tool clamp solenoid
    M64 P5 ; turn on tool unclamp solenoid
    G4 P1.5 ; longer dwell to ensure unclamp completes
    
    ; Check that unclamp activated
    M66 P2 L0 ; Check unclamp sensor
    o237 if [#5399 EQ 0]
        (debug, WARNING: Unclamp sensor not active - trying again)
        M65 P2 ; ensure clamp is off
        G4 P0.5 ; short dwell
        M64 P5 ; ensure unclamp is on
        G4 P1.0 ; longer dwell
    o237 endif

    (DEBUG, EVAL[vcp.getWidget{"dynatc"}.store_tool{#<next_pocket>, 0}])
    
    (debug, Loading tool T#<selected_tool> from pocket #<next_pocket>)
    M22 ; Load Tool
    
    #150 = #<next_pocket>
    #[4000 + #150] = 0 ; empty the pocket
    #3991 = #<selected_tool> ; Set persistent variable to remember tool in spindle after power cycle
    
    ; Move back to safe Z height
    G0 G53 Z#<atc_z_tool_clearance_height>
o230 else
    ; For tool 0 (no tool)
    (debug, Special handling for T0 (empty spindle))
    M65 P5 ; turn off tool unclamp solenoid
    M64 P2 ; turn on tool clamp solenoid
    G4 P.5 ; dwell
    M65 P2 ; turn off tool clamp solenoid
    M65 P0 ; Turn off carousel extend solenoid
    M64 P1 ; Turn on carousel retract solenoid
    M66 P0 L3 Q4 ; check carousel retracted sensor
    o232 if [#5399 LT 0]
        M65 P1 ; turn off carousel retract solenoid
        (abort, Failed to retract carousel) ; abort if the sensor does not activate in 5 seconds
    o232 endif
    M65 P1
o230 endif

M61 Q#<selected_tool>

o240 if [1 EQ 1]
    G43 H#<selected_tool>
o240 endif

o<program_coolant> call

(PRINT, o<toolchange> endsub)
o<toolchange> endsub [1]

M2
